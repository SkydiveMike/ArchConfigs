* use-package
  Use-package is an amazing resource to clean up my init file and have it play
  nice on both my desktop and laptop.
#+begin_src emacs-lisp
;; require
(eval-when-compile
  (require 'use-package))
(require 'diminish)  ; to omit lines from the mode-line
(require 'bind-key)  ; for easy keybindings
#+end_src
* local directories
  These are all the settings that require directories, such as my org agenda
  files etc. They require different setup between desktop and laptop and are
  thus moved to these separate files which are symlinked to the below directory.
#+BEGIN_SRC emacs-lisp
  ;; (use-package emacsdirs)
  (load "~/.emacs.d/emacsdirs.el" t)
#+END_SRC
* interface and appearance
** COMMENT fortune cookies
*** in the frame title
    currently commented out, I prefer scratch
#+begin_src emacs-lisp
(setf frame-title-format
      (with-temp-buffer
        (call-process "fortune" nil t)
        (setf (point) (point-min))
        (while (re-search-forward "[ \n\t]+" nil t)
          (replace-match " " nil t))
        (buffer-string)))
#+end_src
*** in the scratch buffer
also commented out, I can see them in my terminal if desired
#+begin_src emacs-lisp
(setq initial-scratch-message
      (format
       ";; %s\n\n"
       (replace-regexp-in-string
        "\n" "\n;; " ; comment each line
        (replace-regexp-in-string
         "\n$" ""    ; remove trailing linebreak
         (shell-command-to-string "cowthink $(fortune showerthoughts)")))))
#+end_src
** turn off UI elements and small tweaks
#+begin_src emacs-lisp
   (autoload 'ibuffer "ibuffer")
   (setq inhibit-splash-screen t)
   (scroll-bar-mode -1)   ; turn off the scroll bar
   (tool-bar-mode -1)     ; turn off the tool bar
   (menu-bar-mode -1)     ; turn off the menu
   (setq visible-bell 1)  ; turn off beeps, make them flash!
   (setq-default fill-column 79)

    ;; 20MB of memory before calling garbage collection
   (setq gc-cons-threshold 20000000)

   ;; typed text will replace highlighted region
   (delete-selection-mode 1)

   ;; backspace deletes one character instead of one column
   (global-set-key (kbd "DEL") 'backward-delete-char)

   ;; enable `downcase-region' and `upcase-region'
   (put 'downcase-region 'disabled nil)
   (put 'upcase-region 'disabled nil)
   (defalias 'yes-or-no-p 'y-or-n-p)

   ;; always follow symlinks w/o asking
   (require 'vc-hooks)
   (setq vc-follow-symlinks t)

   ;; remove trailing whitespace before save
   (add-hook 'before-save-hook 'delete-trailing-whitespace)

   ;; prefer utf-8
   (prefer-coding-system 'utf-8-unix)
#+end_src
** don't make a mess of my folders
#+BEGIN_SRC emacs-lisp
  (setq
   auto-save-default nil
   backup-inhibited t
   confirm-nonexistent-file-or-buffer nil
   create-lockfiles nil
   mouse-wheel-progressive-speed nil)
#+END_SRC
** COMMENT dired should play nice
#+BEGIN_SRC emacs-lisp
  (define-key global-map [remap list-buffers] 'ibuffer)

  (require 'dired)
  ;; move cursor to beginning of line when it makes sense
  (setq wdired-use-dired-vertical-movement 'sometimes)
#+END_SRC
** play nice with parentheses
#+begin_src emacs-lisp
  (electric-pair-mode 1) ; auto-insert matching bracket
  (show-paren-mode 1)    ; turn on paren match highlighting
#+end_src
** rainbow-delimiters
   matching parenthesis are highlighted with rainbow colours.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'LaTeX-mode-hook 'rainbow-delimiters-mode))
#+end_src
** set the theme
*** COMMENT leuven
#+begin_src emacs-lisp
(use-package leuven-theme
  :init
  (load-theme 'leuven t)
  ;; (load-theme 'leuven-dark t)
  :config
  (setq org-fontify-whole-heading-line t))
#+end_src
*** COMMENT leuven-dark
#+begin_src emacs-lisp
(use-package leuven-dark
  :init
  (load-theme 'leuven t))
#+end_src
*** monokai
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :init
    (load-theme 'monokai t))
#+END_SRC

** default font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :family "Source Code Pro" :height 130)
#+end_src
** beacon
   Highlight the current line when scrolling
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init (beacon-mode 1)
    :diminish beacon-mode
    :config
    (setq beacon-size 80)
    (setq beacon-color "#ffcccc"))
  (global-hl-line-mode t)
#+end_src
** rainbow-mode
   Highlight hex colours!
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+END_SRC
* evil
** evil
   vim emulator
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration nil)
    (setq evil-cross-lines t)
    (setq evil-want-C-u-scroll t) ; C-u scrolls up half page
    :config
    (evil-mode 1)
    :bind (:map evil-normal-state-map
		("C-h" . evil-window-left)
		("C-j" . evil-window-down)
		("C-k" . evil-window-up)
		("C-l" . evil-window-right)))

#+end_src
** evil-collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :init
    (evil-collection-init))
#+END_SRC
** evil-org
   evil keymap for org-mode
#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :diminish evil-org-mode)
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+end_src
** COMMENT undo tree
#+begin_src emacs-lisp
(use-package undo-tree
   :ensure t
   :config (global-undo-tree-mode)
   :diminish undo-tree-mode)
#+end_src
** evil-escape
   escape from everything using =jk=
#+begin_src emacs-lisp
  (use-package evil-escape
    :ensure t
    :diminish evil-escape-mode
    :config
    (evil-escape-mode 1)
    (setq-default evil-escape-key-sequence "jk"))
#+end_src
** evil-nerd-commenter
   easy comments in a lot of code formats. Keys are configured in [[evil-leader]].
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t)
#+end_src
** COMMENT evil-leader
#+begin_src emacs-lisp
  (use-package evil-leader  ; default is \
    :ensure t
    :config
    (evil-leader/set-leader "<SPC>")
    (global-evil-leader-mode)
    (evil-leader/set-key
      "i" 'evilnc-comment-or-uncomment-lines
      "l" 'evilnc-quick-comment-or-uncomment-to-the-line
      "c" 'evilnc-copy-and-comment-lines
      "p" 'evilnc-comment-or-uncomment-paragraphs
      "r" 'comment-or-uncomment-region
      "v" 'evilnc-toggle-invert-comment-line-by-line
      "."  'evilnc-copy-and-comment-operator))
#+end_src
** evil-magit
   evil keybindings for magit
#+begin_src emacs-lisp
  (use-package evil-magit
    :ensure t)
#+end_src
** telephone-line
   very nice powerline-based status line
#+begin_src emacs-lisp
  (use-package telephone-line
    :ensure t
    :init
    (setq telephone-line-lhs
	  '((evil   . (telephone-line-evil-tag-segment))
	    (accent . (telephone-line-vc-segment
		       telephone-line-erc-modified-channels-segment
		       telephone-line-process-segment))
	    (nil    . (telephone-line-minor-mode-segment
		       telephone-line-buffer-segment))))
    (setq telephone-line-rhs
	  '((nil    . (telephone-line-misc-info-segment))
	    (accent . (telephone-line-major-mode-segment))
	  (evil   . (telephone-line-airline-position-segment))))
    :config
    (require 'telephone-line-config)
    (telephone-line-evil-config))
#+end_srC
* org-mode
** my gtd and inbox files finding functions
   org-in-file and org-gtd-file are defined in emacsdirs.el (private file).
#+begin_src emacs-lisp
  ;; TODO: figure out how to do this in a less stupid way
  (defun open-gtd-file ()
    "Open the GTD file."
    (interactive)
    (find-file org-gtd-file))
  (defun open-inbox-file ()
    "Open the inbox file."
    (interactive)
    (find-file org-in-file))
  (defun open-clumped-file ()
     "Open the clumped file."
     (interactive)
     (find-file org-clumped-file))
  (define-key global-map "\C-cg" 'open-gtd-file)
  (define-key global-map "\C-ci" 'open-inbox-file)
  (define-key global-map "\C-ct" 'open-clumped-file)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+end_src
** org
   note-taking, todo system, calendar, everything

*** setup
#+begin_src emacs-lisp
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
    (use-package org
      :ensure t
      :config
#+end_src
*** basics
#+begin_src emacs-lisp
      (setq org-return-follows-link t)
      (setf org-special-ctrl-a/e t)
      (setq org-fast-tag-selection-single-key t)
      (setq org-M-RET-may-split-line '((default . nil))) ; folded drawers no longer ruin new entries
#+end_src
*** theming
#+BEGIN_SRC emacs-lisp
      (setq org-startup-indented t)
      ;(setq org-hide-leading-stars t)
      (setf org-tags-column -65)
      (setq org-fontify-emphasized-text t)
      (setq org-fontify-done-headline t)
      (setq org-pretty-entities t)
      (setq org-ellipsis "▼") ;▼ … ◦

#+END_SRC
*** file associations
#+BEGIN_SRC emacs-lisp
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.x?html?\\'" . "xdg-open %s")
          ("\\.pdf\\'" . (lambda (file link)
                           (org-pdfview-open link)))
          ("\\.mp4\\'" . "xdg-open %s")
          ("\\.webm\\'" . "xdg-open %s")
          ("\\.mkv\\'" . "xdg-open %s")
          ("\\.pdf.xoj" . "xournal %s")))
#+END_SRC
*** org-agenda
#+BEGIN_SRC emacs-lisp
      (setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday
      (setq org-deadline-warning-days 14)
      (setq org-agenda-todo-ignore-scheduled t)
      (setq org-agenda-todo-ignore-deadlines t)
      (setq org-agenda-todo-ignore-timestamp t)
      (setq org-agenda-todo-ignore-with-date t)
      (setq org-agenda-prefix-format "  %-17:c%?-12t% s")
      (setq org-agenda-include-all-todo nil)
      (setq org-log-done 'time)
      ;; allow for j/k movement in agenda view
      (add-hook 'org-agenda-mode-hook
		(lambda ()
		  (define-key org-agenda-mode-map "j" 'evil-next-line)
		  (define-key org-agenda-mode-map "k" 'evil-previous-line)))
#+END_SRC

*** agenda filters
      Filter tasks by context (sorted by todo state)
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("i" "Inbox" tags-todo "in"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("g" . "GTD contexts")
          ("gh" "Home" tags-todo "@home"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("gu" "University" tags-todo "@uni"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("ge" "Errands" tags-todo "@errands"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("gl" "Laboratory" tags-todo "@lab"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("gp" "Phone" tags-todo "@phone"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("gm" "e-mail" tags-todo "@email"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("gc" "Computer" tags-todo "@computer"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("gb" "Bank" tags-todo "@bank"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("ga" "Agenda" tags-todo "@agenda"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("gw" "Write" tags-todo "@write"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("gr" "Research" tags-todo "@research"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("E" . "Energy")
          ("E1" "Morning" tags-todo "morning"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("E2" "Afternoon" tags-todo "afternoon"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("E3" "Evening" tags-todo "evening"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("p" . "People")
          ("pM" "Martin" tags-todo "Martin"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("pA" "Anne" tags-todo "Anne"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("pI" "Inigo" tags-todo "Inigo"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("pR" "Robin" tags-todo "Robin"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("pV" "RobinV" tags-todo "RobinV"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("pC" "Margot" tags-todo "Margot"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("pS" "Appy" tags-todo "Appy"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("pZ" "Richard" tags-todo "Richard"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("pL" "Lucas" tags-todo "Lucas"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("pN" "Nele" tags-todo "Nele"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("pH" "Holger" tags-todo "Holger"
           ((org-agenda-sorting-strategy '(todo-state-up))))
          ("W" "Work" tags-todo "Work"
           ((org-agenda-sorting-strategy '(todo-state-up time-up priority-down))))
          ("P" "Personal" tags-todo "Personal"
           ((org-agenda-sorting-strategy '(todo-state-up time-up priority-down))))))
#+end_src
*** capture templates
    customize capture templates, variables are defined in a private file.
 #+begin_src emacs-lisp
   (setq org-capture-templates
   ;; I capture appointments to the inbox and then org-gcal-post-at-point
         '(("a" "Appointment" entry (file org-in-file)
           "* %?\n  %^T\n")
           ("t" "Todo" entry (file org-in-file)
            "* %?\n:PROPERTIES:\n:CREATED: %u\n:END:\n %i\n %a\n")
           ("m" "Email" entry (file org-in-file)
            "* %? :@email:\n:PROPERTIES:\n:CREATED: %u\n:END:\n %i\n %a\n")
           ("w" "Website" entry (file org-in-file)
            "* %?\nEntered on %U\n %i\n %a")
           ("j" "Journal" entry (file+datetree org-journal-file)
            "* %?\nEntered on %U\n %i\n %a")))
 #+end_src

*** TODO states
#+begin_src emacs-lisp
      ;; the todo-states of my gtd-system
      (setq org-todo-keywords
	    '((sequence "TICK(t)" "NEXT(n)" "WAIT(w!/!)" "SOME(s!/!)" "PROJ(p)" "|"
			"DONE(d)" "CANC(c)")))
      ;; prettify the todo keywords
      (setq org-todo-keyword-faces
	    '(("TICK" . (:background "light slate blue"))
	      ("NEXT" . (:foreground "light goldenrod yellow" :background "red" :weight bold))
	      ("WAIT" . (:foreground "dim gray" :background "yellow"))
	      ("SOME" . (:foreground "ghost white"  :background "deep sky blue"))
	      ("DONE" . (:foreground "green4"       :background "pale green"))
	      ("CANC" . (:foreground "dim gray"     :background "gray"))
	      ("PROJ" . (:foreground "navajo white" :background "saddle brown"))))
#+end_src

*** effort estimates
#+begin_src emacs-lisp
      ;; add effort estimate standards
      (add-to-list 'org-global-properties
		   '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
#+end_src
*** context tags
#+begin_src emacs-lisp
      (setq org-tag-alist '((:startgroup . nil) ("@home" . ?h) ("@uni" . ?u) ("@errands" . ?e) ("@lab" . ?l) ("@phone" . ?p) ("@email" . ?m) ("@computer" . ?c) ("@bank" . ?b) (:endgroup . nil)
			    (:startgroup . nil) ("@agenda" . ?a) ("@write" . ?w) ("@research" . ?r) (:endgroup . nil)
			    (:startgroup . nil) ("morning" . ?1) ("afternoon" .?2) ("evening" .?3) (:endgroup . nil)
			    (:startgroup . nil) ("Work" . ?W) ("Personal" . ?P) (:endgroup . nil)
			    ("Martin". ?M) ("Anne" . ?A) ("Inigo". ?I) ("Robin" . ?R) ("RobinV" . ?V)
			    ("Margot" . ?C) ("Appy" . ?S) ("Richard" . ?Z) ("Lucas" . ?L) ("Nele". ?N) ("Holger". ?H)))
#+end_src

*** refiling
    swyper makes refiling amazing!
#+begin_src emacs-lisp
      ;; refiling settings
      (setq org-refile-targets '((nil :maxlevel . 9)
				 (org-agenda-files :maxlevel . 9)))
      (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
      (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
#+end_src
*** org-babel
#+BEGIN_SRC emacs-lisp
  ;; org-babel loads r
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((stan . t)
     (R . t)))
#+END_SRC
*** org-latex export settings
   basic latex settings
#+BEGIN_SRC emacs-lisp
      (setq org-highlight-latex-and-related '(latex script entities))
      (setq org-latex-create-formula-image-program 'dvipng)
      (setq org-latex-default-figure-position 'htbp)
      ;(setq org-latex-pdf-process
  ;	  '("pdflatex -interaction nonstopmode -output-directory %o %f"
  ;	    "bibtex %b"
  ;	    "pdflatex -interaction nonstopmode -output-directory %o %f"
  ;	    "pdflatex -interaction nonstopmode -output-directory %o %f"))
      (setq org-latex-pdf-process
          (list "latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode -output-directory %o' -f -pdf %f"))
      (setq org-latex-prefer-user-labels t)
      ;; disable the ang preview entity, because it conflicts with \ang from siunitx
      (with-eval-after-load 'org-entities
        (setq org-entities
              (cl-remove-if (lambda (x) (and (listp x) (equal (car x) "ang"))) org-entities)))
#+END_SRC

*** close org
#+BEGIN_SRC emacs-lisp
  )
#+end_src
** org-fancy-capture attempt
#+BEGIN_SRC emacs-lisp
    ;;;; Thank you random guy from StackOverflow
    ;;;; http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection
  (require 'org-capture)
  (require 'org-protocol)
  (defadvice org-capture
      (after make-full-window-frame activate)
    "Advise capture to be the only window when used as a popup"
    (if (equal "emacs-popup" (frame-parameter nil 'name))
	(delete-other-windows)))
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "emacs-popup" (frame-parameter nil 'name))
	(delete-frame)))
#+END_SRC
** org-bullets
   prettify org mode
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    :config
    (setq org-bullets-bullet-list
	  '("◉" "●" "○" "♦" "◆" "►" "▸")))
#+end_src
** org-gcal
   synchronize google calendar with org
#+begin_src emacs-lisp
  (use-package org-gcal
    :ensure t) ; config in separate file for privacy
#+end_src
** org-pdfview
#+BEGIN_SRC emacs-lisp
(use-package org-pdfview
  :ensure t)
#+END_SRC
** mathjax
#+BEGIN_SRC emacs-lisp
  (setq org-html-mathjax-options
    '((path "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
      (scale "100")
      (align "center")
      (indent "2em")
      (mathml t)))
  (setq org-html-mathjax-template
  "
 <script type=\"text/x-mathjax-config\">
    MathJax.Ajax.config.path[\"mhchem\"] =
      \"https://cdnjs.cloudflare.com/ajax/libs/mathjax-mhchem/3.2.0\";
    MathJax.Ajax.config.path[\"siunitx\"] =
      \"https://cdn.rawgit.com/burnpanck/MathJax-siunitx/f0f03a29\";
    MathJax.Hub.Config({
      extensions: [\"[mhchem]/mhchem.js\", \"[siunitx]/siunitx.js\"],
      jax: [\"input/TeX\", \"output/HTML-CSS\"],
      TeX: {
        extensions: [\"[mhchem]/mhchem.js\",\"[siunitx]/siunitx.js\"]
      },
      tex2jax: {
        inlineMath: [ ['$','$'], [\"\\(\",\"\\)\"] ],
        displayMath: [ ['$$','$$'], [\"\\[\",\"\\]\"] ],
        processEscapes: true
      },
      \"HTML-CSS\": { availableFonts: [\"TeX\"] }
    });
  </script>
  <script type=\"text/javascript\" async
          src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML\">
</script>
")
#+END_SRC
** org-beamer
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
	       '("beamer"
		 "\\documentclass\[presentation\]\{beamer\}"
		 ("\\section\{%s\}" . "\\section*\{%s\}")
		 ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
		 ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
#+END_SRC
** latex class =ijkarticle=
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
       '("ijkarticle"
	 "\\documentclass{article}
\\usepackage[citestyle=authoryear,bibstyle=authoryear,hyperref=true,maxcitenames=3,url=true,backend=biber,natbib=true]{biblatex}
\\usepackage[version=4]{mhchem} % for chemical equations with `\ce{}'
\\usepackage{siunitx} % for SI units
%% \\usepackage[Symbol]{upgreek} % to allow for upright delta symbol
\\sisetup{
  separate-uncertainty = true,
  multi-part-units = single,
  list-units = single,
  range-units = single
}%
%% new units
\\DeclareSIUnit\\permil{\\text{\\textperthousand}} % per mille
\\DeclareSIUnit\\pmVPDB{\\permil~\\text{VPDB}}     % Vienna Pee Dee Belumnite
\\DeclareSIUnit\\annus{\\text{a}}                 % /annum, latin for one year
\\DeclareSIUnit\\Ma{\\mega\\annus}                 % million years ago
\\DeclareSIUnit\\ka{\\kilo\\annus}                 % thousand years ago
\\DeclareSIUnit\\year{\\text{yr}}                 % unit for duration
\\DeclareSIUnit\\Myr{\\mega\\year}                 % million year
\\DeclareSIUnit\\kyr{\\kilo\\year}                 % thousand year
\\DeclareSIUnit\\ppmv{\\text{ppmv}}               % parts per million volume
\\DeclareSIUnit\\mbsf{\\metre\\text{bsf}}          % metre below sea floor

%% aliases for clearer document
\\newcommand{\\appr}{\\raise.17ex\\hbox{$\\scriptstyle\\sim$}} % approximately symbol
"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
** org-export
#+BEGIN_SRC emacs-lisp
(require 'ob-org)
#+END_SRC
** ox-extra
org-export ignore headlines with ~:ignore:~ tag
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "~/path/to/orgdir/contrib/lisp" t)
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines))
#+END_SRC
** org-ref
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :init
    (setq org-ref-completion-library 'org-ref-ivy-cite)
    :ensure t)
#+END_SRC
* general packages and functions
** easy symbol insertion
   By default C-x 8 o = ° and C-x 8 m = µ. So:
#+begin_src emacs-lisp
(global-set-key (kbd "C-x 8 a") (lambda () (interactive) (insert "α")))
(global-set-key (kbd "C-x 8 b") (lambda () (interactive) (insert "β")))
(global-set-key (kbd "C-x 8 d") (lambda () (interactive) (insert "δ")))
(global-set-key (kbd "C-x 8 D") (lambda () (interactive) (insert "Δ")))
#+end_src
** revert buffer
#+begin_src emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)
#+end_src
** eshell
*** open an eshell here
#+begin_src emacs-lisp
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))
(global-set-key (kbd "C-!") 'eshell-here)
#+end_src
*** close current eshell
#+begin_src emacs-lisp
(defun eshell/x ()
  (insert "exit")
  (eshell-send-input)
  (delete-window))
#+end_src
*** C-l clears the eshell buffer
 #+begin_src emacs-lisp
 (defun eshell-clear-buffer ()
   "Clear terminal"
   (interactive)
   (let ((inhibit-read-only t))
     (erase-buffer)
     (eshell-send-input)))
 (add-hook 'eshell-mode-hook
	   '(lambda()
	      (local-set-key (kbd "C-l") 'eshell-clear-buffer)))
 #+end_src
** ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :ensure t
    :bind
    ("C-c r" . ranger)
    :config
    (setq ranger-show-hidden nil)
    (setq ranger-show-literal nil)
    (setq ranger-show-preview t)
    (setq ranger-width-preview 0.55)
    (ranger-override-dired-mode t))
#+END_SRC
** pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    :ensure t)
#+END_SRC
** COMMENT edit with emacs (chromium)
   Edit gmail messages and other input fields in chrome with emacs, markdown.
#+BEGIN_SRC emacs-lisp
  (use-package edit-server
    :ensure t
    :config
    (edit-server-start))
  (use-package ham-mode
    :ensure t)
  (use-package gmail-message-mode
    :ensure t)
#+END_SRC
** swiper
very nice search replacement
#+begin_src emacs-lisp
  (use-package swiper
    :init (ivy-mode 1)
    :diminish ivy-mode
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    (setq ivy-count-format "(%d/%d) ")
    :bind
    ("\C-s" . swiper)
    ("C-c C-r" . ivy-resume)
    ("<f6>" . ivy-resume)
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("<f1> f" . counsel-describe-function)
    ("<f1> v" . counsel-describe-variable)
    ("<f1> l" . counsel-load-library)
    ("<f2> i" . counsel-info-lookup-symbol)
    ("<f2> u" . counsel-unicode-char)
    ("C-c s" . counsel-ag) ; search
    ("C-c u" . swiper-all)
    ("C-c v" . ivy-push-view)
    ("C-c V" . ivy-pop-view)
    ("C-x l" . counsel-locate))
#+end_src
** ace-window
   Move to other buffers
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 2.0))))))
#+END_SRC
** counsel
   Required for swiper
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t)
#+end_src
** avy
   jump to next chararcter. Slightly redundant b/c of evil's =f= and =t=.
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("C-:" . avy-goto-char)
    ("C-'" . avy-goto-char-2)
    ("M-w" . avy-goto-word-1))
#+end_src
** magit
   git management
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("M-g" . magit-status))
#+end_src
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode))
#+END_SRC
*** counsel-projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+END_SRC
** COMMENT hydra
file bookmarks
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :config
    (global-set-key
     (kbd "C-c j")
     (defhydra hydra-jump (:color blue)
       "jump"
       ("d" (counsel-find-file "~/Documents") "Documents")
       ("D" (counsel-find-file "~/Downloads") "Downloads")
       ("p" (counsel-find-file "~/SurfDrive/PhD/projects") "projects")
       ;; this doesn't work
       ;("pt" (counsel-find-file "~/SurfDrive/PhD/presentations") "presentations")
       ))
       ;; what could be a good way to do this?
    (global-set-key
     (kbd "C-c p")
     (defhydra hydra-projects (:color blue)
       "projects"
       ("s" (counsel-find-file "~/SurfDrive/PhD/projects/standardstats") "standardstats"))))
#+END_SRC
** auto-complete
   auto complete everything
#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :diminish auto-complete-mode
    :init
    (ac-config-default)
    (global-auto-complete-mode t))
#+end_src
** COMMENT golden-ratio
   #+BEGIN_SRC emacs-lisp
     (use-package golden-ratio
       :ensure t
       :config
       (golden-ratio-mode 1)
       (setq golden-ratio-auto-scale t))
   #+END_SRC
** file extension modes
#+BEGIN_SRC emacs-lisp
  (defvar auto-mode-alist-init
    auto-mode-alist "emacs default value for `auto-mode-alist'.")
  (setq auto-mode-alist
	(append '(
		  ("i3config" . conf-mode)
		  ("i3status" . conf-mode)
		  (".*rc\\'" . conf-mode)
		  ("\\.inp\\'" . conf-mode)
		  )
		auto-mode-alist-init))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
** web dictionary
#+BEGIN_SRC emacs-lisp
  (use-package define-word
    :ensure t
    :config
    (global-set-key (kbd "C-c d") 'define-word))
#+END_SRC
** yasnippet
   usefull snippets for me: org-mode (fig_, )
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
  ;; (use-package r-autoyas
    ;; :init
    ;; (add-hook 'ess-mode-hook 'r-autoyas-ess-activate))
#+END_SRC
** firefox as default browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
	browse-url-generic-program "firefox")
#+END_SRC
** emacs-pkgbuild-mode
Install it with Pacman
#+BEGIN_SRC bash :results none :exports code
sudo pacman -S emacs-pkgbuild-mode
#+END_SRC

Then load it into emacs when opening a PKGBUILD file
#+BEGIN_SRC emacs-lisp
(autoload 'pkgbuild-mode "pkgbuild-mode.el" "PKGBUILD mode." t)
(setq auto-mode-alist (append '(("/PKGBUILD$" . pkgbuild-mode)) auto-mode-alist))
#+END_SRC
** COMMENT writeroom-mode
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :ensure t)
#+END_SRC
** COMMENT erc
   I use weechat on command line now
#+BEGIN_SRC emacs-lisp
  (use-package erc
    :config
    (setq erc-hide-list '("JOIN" "PART" "QUIT"))
    (setq erc-track-exclude-types '("JOIN" "MODE"
      "NICK" "PART" "QUIT" "305" "306" "324" "329" "332" "333" "353" "477")))
#+END_SRC
* email
** COMMENT notmuch email
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :ensure t
    :config
    (setq message-kill-buffer-on-exit t)
    (setq notmuch-fcc-dirs '((".*gmail\.com.*" . "gmail/Sent +sent -inbox")
			     (".*solismail\.uu\.nl.*" . "solismail/Sent +sent -inbox")))
    :bind
    ("C-c m" . notmuch))
#+END_SRC
** mu4e
   install it with package mu from repo
#+BEGIN_SRC emacs-lisp
  (require 'mu4e)
  (global-set-key (kbd "\C-c m") 'mu4e)
  (setq mu4e-drafts-folder "/Drafts"
        mu4e-sent-folder "/Sent Items"
        mu4e-trash-folder "/Deleted Items")
  ;;(setq mu4e-compose-format-flowed t)  ; plain-text nice to read on phone
  (setq mu4e-maildir-shortcuts
        '(("/inbox" . ?i)
          ("/NEXT" . ?n)
          ("/Waiting" . ?w)
          ("/Deferred" . ?d)
          ("/news" . ?m)
          ("/Important backlog" . ?l)
          ("/Sent Items" . ?s)))
  (setq mu4e-change-filenames-when-moving t) ; important for isync
  (setq mu4e-headers-date-format "%Y-%m-%d %H:%M")
  (setq mu4e-headers-fields
        '((:date          .  17)
          (:flags         .   5)
          (:from          .  22)
          (:subject       .  nil)))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-headers-include-related t)
  (setq mu4e-confirm-quit nil)
  (setq mu4e-view-show-images t)
#+END_SRC
** org-mu4e
#+BEGIN_SRC emacs-lisp
  (require 'org-mu4e)
  (define-key mu4e-headers-mode-map (kbd "C-c c") 'org-mu4e-store-and-capture)
  (define-key mu4e-view-mode-map    (kbd "C-c c") 'org-mu4e-store-and-capture)
  (setq org-mu4e-link-query-in-headers-mode nil)
#+END_SRC
** COMMENT mu4e-conversation
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-conversation
    :ensure t
    :config
    (global-mu4e-conversation-mode))
#+END_SRC
** mu4e notifications
   #+BEGIN_SRC emacs-lisp
   (use-package mu4e-alert
     :ensure t
     :config
     (mu4e-alert-set-default-style 'libnotify)
     (add-hook 'after-init-hook #'mu4e-alert-enable-notifications))
   #+END_SRC
** COMMENT gnus
 #+BEGIN_SRC emacs-lisp
   (setq gnus-select-method
	 '(nnimap "gmail"
		  (nnimap-address "imap.gmail.com")
		  (nnimap-server-port "imaps")
		  (nnimap-stream ssl)))

   (setq smtpmail-smtp-server "smtp.gmail.com"
	 smtpmail-smtp-service 587
	 gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
 #+END_SRC
* Science packages
** ess
   emacs speaks statistics, work with R etc.
#+begin_src emacs-lisp
  (use-package ess
    :ensure t
    :config
    (setq ess-default-style 'RStudio-)
    :commands R)
#+end_src
** polymode
   for working with .Rmd files etc.
#+begin_src emacs-lisp
  (use-package polymode
    :ensure t
    :mode
      ;; R modes
      ("\\.Snw" . poly-noweb+r-mode)
      ("\\.Rnw" . poly-noweb+r-mode)
      ("\\.Rmd" . poly-markdown+r-mode))
#+end_src
** matlab
   if I'm ever required to work in non-open-source
#+begin_src emacs-lisp
  (use-package matlab
    :init (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
    :mode ("\\.m\\'" . matlab-mode)
    :interpreter "matlab"
    :config
    (setq matlab-indent-function t)
    (setq matlab-indent-function "matlab"))
#+end_src
** markdown-mode
   markdown mode for writing
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+end_src
** pandoc-mode
   exporting markdown
#+begin_src emacs-lisp
  (use-package pandoc-mode
    :defer
    :init (add-hook 'markdown-mode-hook 'pandoc-mode))
#+end_src

** LaTeX (AUCTeX, RefTeX)
   for working with \LaTeX
#+begin_src emacs-lisp
  (use-package auctex
    :ensure t)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
  (add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)
  (setq reftex-plug-into-AUCTeX t)
#+end_src
** ispell: spell-checking
#+begin_src emacs-lisp
  (require 'ispell)
  (setq ispell-dictionary "british-ize-w_accents")
#+end_src
** hl-todo
#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :ensure t
    :bind (:map hl-todo-mode-map
                ("C-c k" . hl-todo-previous)
                ("C-c j" . hl-todo-next))
    :init
    (add-hook 'LaTeX-mode-hook 'hl-todo-mode)
    (add-hook 'ess-mode-hook 'hl-todo-mode))
#+END_SRC
** bibtex/ivy-bibtex
   reference manager I use it in conjunction with zotero, which generates the
   .bib files, and org-ref, to insert citations in org files.
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :ensure t
    :config
    (autoload 'ivy-bibtex "ivy-bibtex" "" t)
    (setq bibtex-completion-pdf-field "file"))
#+end_src
