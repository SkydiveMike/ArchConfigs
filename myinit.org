* use-package
Use-package is an amazing resource to clean up my init file and have it play
nice on both my desktop and laptop.
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
  (use-package diminish)  ; to omit lines from the mode-line
  (use-package bind-key)  ; for easy keybindings
#+end_src
* dirvar
define dirvars 'org-in-file', 'org-gtd-file', etc.
#+begin_src emacs-lisp
  (defvar org-in-file "~/org/inbox.org"
    "GTD Inbox")
  (defvar org-gtd-file "~/org/todo.org"
    "Personal TODO's")
  (defvar org-tickler-file "~/org/tickler.org"
    "Tickler")
  (defvar org-clumped-file "~/org/clumpednotes.org"
    "Work TODO's")
  (defvar org-notes-file "~/org/notes.org"
    "General Notes and Protocols")
  (defvar org-someday-file "~/org/someday.org"
    "Someday/Maybe")
  (defvar org-journal-file "~/org/journal.org"
    "Journal")
  (defvar org-lists-file "~/org/lists.org"
    "Lists of Movies etc.")
  (defvar org-cal-file "~/org/calendars/gcal.org"
    "Google Calendar")
#+end_src
* interface and appearance
** turn off UI elements and small tweaks
The gc-cons-threshold is set to a superlarge number for faster startup time. It
is reset at [[*reset gc-cons-threshold][reset gc-cons-threshold]].
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1)   ; turn off the scroll bar
  (tool-bar-mode -1)     ; turn off the tool bar
  (menu-bar-mode -1)     ; turn off the menu
  (setq visible-bell 1)  ; turn off beeps, make them flash!
  ;; typing
  (setq-default fill-column 79)
  (setq sentence-end-double-space nil)
  ;; typed text will replace highlighted region
  (delete-selection-mode 1)
  ;; backspace deletes one character instead of one column
  (global-set-key (kbd "DEL") 'backward-delete-char)

  ;; remove trailing whitespace before save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; prefer utf-8
  (prefer-coding-system 'utf-8-unix)

  (setq mouse-wheel-progressive-speed nil)

  (setq gc-cons-threshold 100000000)

  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; always follow symlinks w/o asking
  (require 'vc-hooks)
  (setq vc-follow-symlinks t)
#+end_src
** don't make a mess of my folders
#+begin_src emacs-lisp
  (setq auto-save-default nil
        backup-inhibited t
        confirm-nonexistent-file-or-buffer nil
        create-lockfiles nil)
#+end_src
** frames-only-mode
let my window manager handle screen creation
#+begin_src emacs-lisp
  (use-package frames-only-mode
    :config (setq frames-only-mode t))
#+end_src
** play nice with parentheses
#+begin_src emacs-lisp
  (electric-pair-mode 1) ; auto-insert matching bracket
  (show-paren-mode 1)    ; turn on paren match highlighting
#+end_src
** rainbow-delimiters
matching parenthesis are highlighted with rainbow colours.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    :hook ((prog-mode LaTeX-mode) . rainbow-delimiters-mode))
#+end_src
** set the theme
*** clean up previous theme
from this [[https://explog.in/dot/emacs/config.html][config]] from [[https://www.reddit.com/r/emacs/comments/4mzynd/what_emacs_theme_are_you_currently_using/d43c5cw][reddit]]
#+begin_src emacs-lisp
  (defadvice load-theme (before clear-previous-themes activate)
    "Clear existing theme settings instead of layering them"
    (mapc #'disable-theme custom-enabled-themes))
#+end_src
*** doom
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+end_src
*** COMMENT apropospriate
#+begin_src emacs-lisp
  (use-package apropospriate-theme
    :config (load-theme 'apropospriate-light t))
#+end_src
*** COMMENT poet
**** use-package
#+begin_src emacs-lisp :tangle no
  (use-package poet-theme
    :ensure t
    :hook (text-mode . (lambda() (variable-pitch-mode 1)))
    :init
    (set-face-attribute 'default nil :family "Iosevka" :height 130)
    (set-face-attribute 'fixed-pitch nil :family "Iosevka" :height 125)
    (set-face-attribute 'variable-pitch nil :family "ETBookOT")
    :config
    (load-theme 'poet-dark))
#+end_src
**** COMMENT no use-package
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Iosevka" :height 120)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka")
  (set-face-attribute 'variable-pitch nil :family "Baskerville")
  (load-theme 'poet)
  (add-hook 'text-mode-hook
            (lambda ()
              (variable-pitch-mode 1)))
#+end_src

*** COMMENT fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Fira Code" :height 130)
  (set-face-attribute 'fixed-pitch nil :family "Fira Code" :height 130)
  (set-face-attribute 'variable-pitch nil :family "ETBookOT" :height 150)
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
#+end_src
*** COMMENT padding
#+begin_src emacs-lisp
  (setq line-spacing 0.1)
  (lambda () (progn
    (setq left-margin-width 2)
    (setq right-margin-width 2)
    (set-window-buffer nil (current-buffer))))
#+end_src
** beacon
Highlight the current line when scrolling
#+begin_src emacs-lisp
  (use-package beacon
    :init (beacon-mode 1)
    :diminish beacon-mode
    :config
    (setq beacon-size 80)
    (setq beacon-color "#ffcccc"))
  (global-hl-line-mode t)
#+end_src
** rainbow-mode
Highlight hex colours!
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook ((html-mode r-mode) . rainbow-mode))
#+end_src
** relative number mode
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'visual
        display-line-numbers-current-absolute t
        display-line-numbers-width 4
        display-line-numbers-widen nil)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
** compilation window height
#+begin_src emacs-lisp
  (setq compilation-window-height 15)
#+end_src
** helpful
https://github.com/Wilfred/helpful
#+begin_src emacs-lisp
  (use-package helpful)
#+end_src
** demos
Insert demos after describe function https://github.com/xuchunyang/elisp-demos
#+begin_src emacs-lisp
  (use-package elisp-demos
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
** telephone-line
very nice powerline-based status line
#+begin_src emacs-lisp
  (use-package telephone-line
    :after evil
    :init
    (setq telephone-line-lhs
          '((evil   . (telephone-line-evil-tag-segment))
            (accent . (telephone-line-vc-segment
                       telephone-line-erc-modified-channels-segment
                       telephone-line-process-segment))
            (nil    . (;telephone-line-minor-mode-segment
                       telephone-line-buffer-segment))))
    (setq telephone-line-rhs
          '((nil    . (telephone-line-misc-info-segment))
            (accent . (telephone-line-major-mode-segment))
          (evil   . (telephone-line-airline-position-segment))))
    :config
    (require 'telephone-line-config)
    (telephone-line-evil-config))
#+end_src
* evil
** evil
vim emulator
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    ;; (setq evil-cross-lines t)
    ;; (setq evil-want-C-u-scroll t) ; C-u scrolls up half page
    :config
    (evil-mode 1))
#+end_src
** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** evil-org
https://github.com/Somelauw/evil-org-mode
evil keymap for org-mode
#+begin_src emacs-lisp
  (use-package evil-org
    :after org evil
    :hook ((org-mode . evil-org-mode)
           (evil-org-mode . (lambda ()
                              (evil-org-set-key-theme
                               '(navigation insert return textobjects additional shift todo heading calendar))))
           (org-log-buffer-setup . evil-insert-state)
           (org-capture-mode . evil-insert-state)
           (yas-before-expand-snippet . evil-insert-state))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
** evil-escape
https://github.com/syl20bnr/evil-escape
escape from everything using =jk=
#+begin_src emacs-lisp
  (use-package evil-escape
    :diminish evil-escape-mode
    :config
    (evil-escape-mode 1)
    (setq-default evil-escape-key-sequence "jk"))
#+end_src
** evil-easymotion
https://github.com/PythonNut/evil-easymotion/
#+begin_src emacs-lisp
  (use-package evil-easymotion
    :config
    (evilem-default-keybindings "SPC"))
#+end_src
** evil-snipe
https://github.com/hlissner/evil-snipe
#+begin_src emacs-lisp
  (use-package evil-snipe
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1))
#+end_src
** evil-commentary
https://github.com/linktohack/evil-commentary
comment/uncomment with gc
#+begin_src emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+end_src
** evil-indent-plus
https://github.com/TheBB/evil-indent-plus
operate on indentation regions, mainly with ~ii~
#+begin_src emacs-lisp
  (use-package evil-indent-plus
    :config
    (evil-indent-plus-default-bindings))
#+end_src
** COMMENT evil-leader
#+begin_src emacs-lisp
  (use-package evil-leader  ; default is \
    :config
    (evil-leader/set-leader "SPC>")
    (global-evil-leader-mode)
    (evil-leader/set-key
      "i" 'evilnc-comment-or-uncomment-lines
      "l" 'evilnc-quick-comment-or-uncomment-to-the-line
      "c" 'evilnc-copy-and-comment-lines
      "p" 'evilnc-comment-or-uncomment-paragraphs
      "r" 'comment-or-uncomment-region
      "v" 'evilnc-toggle-invert-comment-line-by-line
      "."  'evilnc-copy-and-comment-operator))
#+end_src
** evil-magit
evil keybindings for magit
#+begin_src emacs-lisp
  (use-package evil-magit
    :after magit
    :hook
    (git-commit-mode . evil-insert-state)
    :config
    (evil-set-initial-state 'magit-log-edit-mode 'insert))
#+end_src
* org-mode
** my gtd and inbox files finding functions
org-in-file and org-gtd-file are defined in emacsdirs.el (private file).
#+begin_src emacs-lisp
  ;; TODO: figure out how to do this in a less stupid way
  (defun open-gtd-file ()
    "Open the GTD file."
    (interactive)
    (find-file org-gtd-file))
  (defun open-inbox-file ()
    "Open the inbox file."
    (interactive)
    (find-file org-in-file))
  (defun open-clumped-file ()
     "Open the clumped file."
     (interactive)
     (find-file org-clumped-file))
  #+end_src
** setup
#+begin_src emacs-lisp
  ;; get latest org-mode from other repo than elpa
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (use-package org
    :pin org
    :ensure org-plus-contrib
#+end_src
** COMMENT hooks
#+begin_src emacs-lisp
  :hook (org-mode . variable-pitch-mode)
#+end_src
** keybindings
#+begin_src emacs-lisp
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c g" . open-gtd-file)
   ("C-c i" . open-inbox-file)
   ("C-c t" . open-clumped-file)
   ("C-c !" . org-time-stamp-inactive))
#+end_src
** basics
#+begin_src emacs-lisp
  :config
  (setq org-return-follows-link t)
  (setf org-special-ctrl-a/e t)
  ;; folded drawers no longer ruin new entries
  (setq org-M-RET-may-split-line '((default . nil)))
  (setq org-startup-with-inline-images t)
#+end_src
** clocking/logging
#+begin_src emacs-lisp
  (setq org-check-running-clock t
        org-log-note-clock-out t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
#+end_src
** theming
#+begin_src emacs-lisp
  (setf org-tags-column -65)
  (setq org-startup-indented t
        org-agenda-block-separator ""
        org-fontify-emphasized-text t
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-pretty-entities t
        org-ellipsis " ▼ " ;▼ … ◦
        org-hide-emphasis-markers t)
#+end_src
*** org-bullets
prettify org mode
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook
    (org-mode . (lambda () (org-bullets-mode 1)))
    :config
    (setq org-bullets-bullet-list
          '("◉" "●" "○" "♦" "◆" "►" "▸")))
          ;; '(" ")))
#+end_src
** file associations
#+begin_src emacs-lisp
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.x?html?\\'" . "xdg-open %s")
          ("\\.pdf\\'" . (lambda (file link)
                           (org-pdfview-open link)))
          ("\\.mp4\\'" . "xdg-open %s")
          ("\\.webm\\'" . "xdg-open %s")
          ("\\.mkv\\'" . "xdg-open %s")
          ("\\.pdf.xoj\\'" . "xournal %s")))
#+end_src
** GTD stuff
*** org-agenda
#+begin_src emacs-lisp
  ;; (setq org-agenda-files (list "<file1.org> etc."))
  (setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday
  (setq org-deadline-warning-days 14)
  ;; exclude scheduled items from all todo's in list
  ;; (setq org-agenda-todo-ignore-scheduled t)
  ;; (setq org-agenda-todo-ignore-deadlines t)
  ;; (setq org-agenda-todo-ignore-timestamp t)
  ;; (setq org-agenda-todo-ignore-with-date t)
  (setq org-agenda-prefix-format "  %-17:c%?-12t% s")
  (setq org-agenda-include-all-todo nil)
#+end_src
*** agenda files
all the org-files in my org-directory
#+begin_src emacs-lisp
  (setq org-directory "~/org/")
  (setq org-agenda-files (directory-files-recursively org-directory "\\.org$"))
#+end_src
*** refile targets
swyper makes refiling amazing!
#+begin_src emacs-lisp
  ;; TODO: refile without the annoying ^ regex
  (setq org-refile-targets (quote ((nil :maxlevel . 9)  ;; current file
                                   (org-gtd-file :maxlevel . 3)
                                   (org-tickler-file :maxlevel . 2)
                                   (org-notes-file :maxlevel . 2)
                                   (org-lists-file :maxlevel . 2)
                                   (org-someday-file :maxlevel . 2)
                                   (org-clumped-file :maxlevel . 4))))
  (setq org-outline-path-complete-in-steps nil)   ;; Refile in a single go
  (setq org-refile-use-outline-path t)            ;; Show full paths for refiling
#+end_src
*** agenda filters
Filter tasks by context (sorted by todo state)
#+begin_src emacs-lisp
  (setq org-agenda-sorting-strategy
        '((agenda habit-down time-up priority-down todo-state-up category-keep)
          (todo todo-state-up priority-down category-keep)
          (tags priority-down todo-state-up category-keep)
          (search category-keep)))
  (setq org-agenda-custom-commands
        '(("i" "Inbox" tags "in")
          ("I" "Important"
           ((tags "PRIORITY=\"A\"/PROJ"
                  ((org-agenda-overriding-header "High-priority projects:")))
            (tags "PRIORITY=\"A\"/!-PROJ"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))))
          ("A" agenda*)
          ("W" "Work" tags-todo "Work")
          ("P" "Personal" tags-todo "Personal")
          ("R" "R" tags-todo "R")
          ("O" "org" tags-todo "org")
          ("B" "Bayes" tags-todo "bayes")
          ("g" . "GTD contexts")
          ("gh" "Home" tags-todo "@home")
          ("go" "Office" tags-todo "@office")
          ("ge" "Errands" tags-todo "@errands")
          ("gl" "Laboratory" tags-todo "@lab")
          ("gc" "Computer" tags-todo "@computer")
          ("gb" "Phone" tags-todo "@phone")
          ("gm" "e-mail" tags-todo "@email")
          ;; ("gs" "Slack" tags-todo "@slack")
          ("gb" "Bank" tags-todo "@bank")
          ("gw" "Write" tags-todo "@write")
          ("gp" "Program" tags-todo "@program")
          ("gr" "Read" tags-todo "@read")
          ("gg" "Research" tags-todo "@research")
          ("gs" "Schedule" tags-todo "@schedule")
          ("ga" "Agenda" tags-todo "@agenda")
          ("E" . "Energy")
          ("E1" "Morning" tags-todo "morning")
          ("E2" "Afternoon" tags-todo "afternoon")
          ("E3" "Evening" tags-todo "evening")
          ("p" . "People")
          ("pM" "Martin" tags-todo "Martin")
          ("pA" "Anne" tags-todo "Anne")
          ("pI" "Inigo" tags-todo "Inigo")))
#+end_src
*** capture templates
customize capture templates
 #+begin_src emacs-lisp
   (setq org-capture-templates
         '(("a" "Appointment" entry (file org-in-file)
            "* %?\n  %^T\n")
           ("t" "Todo" entry (file org-in-file)
            "* %?\n:PROPERTIES:\n:CREATED: %u\n:END:\n %i\n %a\n")
           ("T" "Todo-nolink-tag" entry (file org-in-file)
            "* %? %^G\n:PROPERTIES:\n:CREATED: %u\n:END:\n %i\n")
           ("m" "Email" entry (file org-in-file)
            "* %? :@email:\n:PROPERTIES:\n:CREATED: %u\n:END:\n %i\n %a\n")
           ("w" "Website" entry (file org-in-file)
            "* %?\nEntered on %U\n %i\n %a")
           ("j" "Journal" entry (file+olp+datetree org-journal-file)
            "* %?\nEntered on %U\n %i\n %a")))
 #+end_src
*** TODO states
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "NEXT(n)" "WAIT(w!/!)" "TICK(t)" "PROJ(p)" "SOME(s!/!)" "|"
                    "DONE(d)" "CANC(c)")))
  ;; prettify the todo keywords
  (setq org-todo-keyword-faces
        '(("NEXT" . (:foreground "light goldenrod yellow" :background "red" :weight bold))
          ("WAIT" . (:foreground "dim gray" :background "yellow"))
          ("TICK" . (:background "light slate blue"))
          ("SOME" . (:foreground "ghost white"  :background "deep sky blue"))
          ("DONE" . (:foreground "green4"       :background "pale green"))
          ("CANC" . (:foreground "dim gray"     :background "gray"))
          ("PROJ" . (:foreground "navajo white" :background "saddle brown"))))
#+end_src
*** effort estimates
#+begin_src emacs-lisp
  (add-to-list 'org-global-properties
               '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
#+end_src
*** habits
#+begin_src emacs-lisp
  (add-to-list 'org-modules 'org-habit t)
#+end_src
*** context tags
#+begin_src emacs-lisp
  (setq org-fast-tag-selection-single-key t)
  (setq org-tag-alist '((:startgroup . nil)
                        ("@home" . ?h)
                        ("@office" . ?o)
                        ("@errands" . ?e)
                        ("@lab" . ?l)
                        ("@travel" . ?t)
                        (:endgroup . nil)
                        ("@computer" . ?c)  ;; general in case I can't decide
                        ("@phone" . ?B)     ;; b for Dutch "bellen"
                        ("@email" . ?m)
                        ;; ("@slack". ?s)
                        ("@bank" . ?b)      ;; I need my little reader thingie
                        ("@write" . ?w)
                        ("@program" . ?p)
                        ("@read" . ?r)
                        ("@research" . ?g)
                        ("@schedule" . ?s)
                        ("@agenda" . ?a)    ;; things to discuss
                        (:startgroup . nil)
                        ("morning" . ?1) ("afternoon" .?2) ("evening" .?3)
                        (:endgroup . nil)
                        (:startgroup . nil)
                        ("Work" . ?W) ("Personal" . ?P)
                        (:endgroup . nil)
                        ;; programming/software stuff
                        ("R" . ?R) ("python" . ?y) ("org" . ?O) ("Bayes" . ?B) ("emacs" . ?E) ("inkscape" . ?i)
                        ;; tags to accompany the @agenda context
                        ("Martin" . ?M) ("Inigo" . ?I) ("Anne" . ?A) ("Appy") ("FEST")))
#+end_src
** exporting
*** source code block settings
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t)
  (add-to-list 'org-structure-template-alist
               '("se" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist
               '("sr" . "src R"))
#+end_src
*** org-babel languages
#+begin_src emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (dot . t)
     (python . t)
     (shell . t)
     (stan . t)
     (R . t)))
#+end_src
*** org-export odt
#+begin_src emacs-lisp
  (require 'ob-org)
#+end_src
*** ox-extra
org-export ignore headlines with ~:ignore:~ tag
#+begin_src emacs-lisp
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines))
#+end_src
*** ox-latex
#+begin_src emacs-lisp
  (require 'ox-latex)
#+end_src
*** org-latex export settings
basic latex settings
#+begin_src emacs-lisp
  (setq org-highlight-latex-and-related '(latex script entities))
  (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-latex-default-figure-position 'htbp)
  (setq org-latex-pdf-process
        (list "latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode -output-directory %o' -f -pdf %f"))
  (setq org-latex-prefer-user-labels t)
#+end_src
*** org-entities-user
These are nice shorthands for commands I use often. In org-source they look
nice, and they export to both \LaTeX and =html= correctly. Note that
unfortunately, special entity names cannot contain numerics, so =\d18O= is not
possible.
#+begin_src emacs-lisp
  (setq org-entities-user
        '(("celsius" "\\(^{\\circ}\\)C" nil "&deg;C" "°C" "°C" "℃")
          ("minus" "-" t "&minus;" "-" "-" "−")  ;; defaults to =\\minus= in LaTeX, which doesn't work.
          ;; unit space, something like 15\us{}Ma
          ("permil" "\\textperthousand{}" nil "&permil;" "per thousand" "per thousand" "‰")  ;; exactly the same as in org-entities
          ("us" "\\," nil "&nbsp;" " " " " " ")
          ("appr" "\\sim" t "&tilde;" "~" "~" "~")
          ;; for gps-coordinates
          ("degree" "^{\\circ}" t "&deg;" "°" "°" "°")
          ("arcminute" "^{'}" t "&prime;" "'" "′" "′")
          ("arcsecond" "^{''}" t "&Prime;" "\"" "″" "″")))
#+end_src
*** latejx class =ijkarticle=
#+begin_src emacs-lisp
  (add-to-list 'org-latex-classes
         '("ijkarticle"
  "\\documentclass{article}
  \\usepackage[citestyle=authoryear,bibstyle=authoryear,hyperref=true,maxcitenames=3,url=true,backend=biber,natbib=true]{biblatex}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
** close use-package org
#+begin_src emacs-lisp
  )
#+end_src
** org-pomodoro
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :after org
    :bind ("C-c p" . org-pomodoro))
#+end_src
** COMMENT org-fancy-capture attempt
#+begin_src emacs-lisp
  ;;;; Thank you random guy from StackOverflow
  ;;;; http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection
  (require 'org-capture)
  (require 'org-protocol)
  (defadvice org-capture
      (after make-full-window-frame activate)
    "Advise capture to be the only window when used as a popup"
    (if (equal "emacs-popup" (frame-parameter nil 'name))
        (delete-other-windows)))
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "emacs-popup" (frame-parameter nil 'name))
        (delete-frame)))
#+end_src
** COMMENT org-gcal
synchronize google calendar with org. Note that these settings are
overwritten by a private file that has my different calendars and IDs.
#+begin_src emacs-lisp
  (use-package org-gcal
    :after org
    :bind (:map org-agenda-mode-map
                ("C-S-u" . org-gcal-fetch))  ;; same key as mu4e!
    :config
    (setq org-gcal-client-id "<your-client-id>"
          org-gcal-client-secret "<your-client-secret>"
          org-gcal-file-alist '(("<link>@group.calendar.google.com>" . "<link-to-org-file>"))))
#+end_src
** org-pdfview
#+begin_src emacs-lisp
  (use-package org-pdfview
    :after org pdf-tools)
#+end_src
** org-beamer
#+begin_src emacs-lisp
  (use-package ox-latex
    :after org
    :ensure nil
    :config
    (add-to-list 'org-latex-classes
                 '("beamer"
                   "\\documentclass\[presentation\]\{beamer\}"
                   ("\\section\{%s\}" . "\\section*\{%s\}")
                   ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                   ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))))
#+end_src
** org-ref
#+begin_src emacs-lisp
    (use-package org-ref
      :bind ("C-c j" . org-ref-bibtex-hydra/body)
      :after org
      :init
      (setq org-ref-completion-library 'org-ref-ivy-cite)
      (setq reftex-default-bibliography '("~/SurfDrive/bibliography/references.bib"))
      (setq org-ref-bibliography-notes "~/SurfDrive/bibliography/notes.org"
            org-ref-default-bibliography '("~/SurfDrive/bibliography/references.bib")
            org-ref-pdf-directory "~/SurfDrive/bibliography/bibtex-pdfs/")
      (setq bibtex-completion-pdf-open-function 'org-open-file)
      :config
      (require 'doi-utils)
  (require 'org-id)
  (require 'org-ref-wos)
  (require 'org-ref-scopus)
  (require 'org-ref-pubmed)
      (setq bibtex-autokey-year-length 4
            bibtex-autokey-name-year-separator ""
            bibtex-autokey-year-title-separator "-"
            bibtex-autokey-titleword-separator "-"
            bibtex-autokey-titlewords 0
            bibtex-autokey-titlewords-stretch 1
            bibtex-autokey-titleword-length 5)
      (add-to-list 'org-ref-bibtex-journal-abbreviations
                   '("JIR" "Journal of Irreproducible Research" "J. Irrep. Res."))
      (require 'org-ref-scopus))
#+end_src
** org-noter
#+begin_src emacs-lisp
  (use-package org-noter
    :after pdf-tools org)
#+end_src
* general packages and functions
** easy symbol insertion
By default C-x 8 o = ° and C-x 8 m = µ. So:
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x 8 a") (lambda () (interactive) (insert "α")))
  (global-set-key (kbd "C-x 8 b") (lambda () (interactive) (insert "β")))
  (global-set-key (kbd "C-x 8 d") (lambda () (interactive) (insert "δ")))
  (global-set-key (kbd "C-x 8 D") (lambda () (interactive) (insert "Δ")))
#+end_src
** all-the-icons
https://github.com/domtronn/all-the-icons.el
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (setq inhibit-compacting-font-caches t)
#+end_src
** all-the-icons-ivy
#+begin_src emacs-lisp
  (use-package all-the-icons-ivy
    :config
    (all-the-icons-ivy-setup))
#+end_src
** COMMENT neotree
#+begin_src emacs-lisp
  (use-package neotree
    :bind ("<f8>" . neotree-toggle)
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src
** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :bind ("<f8>" . treemacs))
#+end_src
** treemacs-evil
#+begin_src emacs-lisp
  (use-package treemacs-evil
      :ensure t
      :after treemacs evil)
#+end_src
** COMMENT treemacs-magit
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :ensure t
    :after treemacs magit)
#+end_src
** revert buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+end_src
** COMMENT eshell
*** open an eshell here
#+begin_src emacs-lisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
  current buffer's file. The eshell is renamed to match that
  directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))
  (global-set-key (kbd "C-!") 'eshell-here)
#+end_src
*** close current eshell
#+begin_src emacs-lisp
  (defun eshell/x ()
    (insert "exit")
    (eshell-send-input)
    (delete-window))
#+end_src
*** C-l clears the eshell buffer
 #+begin_src emacs-lisp
 (defun eshell-clear-buffer ()
   "Clear terminal"
   (interactive)
   (let ((inhibit-read-only t))
     (erase-buffer)
     (eshell-send-input)))
 (add-hook 'eshell-mode-hook
	   '(lambda()
	      (local-set-key (kbd "C-l") 'eshell-clear-buffer)))
 #+end_src
** COMMENT ranger
#+begin_src emacs-lisp
  (use-package ranger
    :bind
    ("C-c r" . ranger)
    :config
    (setq ranger-show-hidden nil)
    (setq ranger-show-literal nil)
    (setq ranger-show-preview t)
    (setq ranger-width-preview 0.55)
    (ranger-override-dired-mode t))
#+end_src
** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :config
    ;; (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    :bind
    ;; swiper doesn't play nice with pdf-tools, so I disable it.
    (:map pdf-view-mode-map ("C-s" . isearch-forward)))
#+end_src
** swiper
very nice search replacement
#+begin_src emacs-lisp
  (use-package swiper
    :init (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    (setq ivy-count-format "(%d/%d) ")
    :bind
    ("\C-s" . swiper)
    ("C-c C-r" . ivy-resume)
    ("C-c v" . ivy-push-view)
    ("C-c V" . ivy-pop-view))
#+end_src
** COMMENT avy
jump to next chararcter. Slightly redundant b/c of evil's =f= and =t=.
#+begin_src emacs-lisp
  (use-package avy
    :bind
    ("C-:" . avy-goto-char)
    ("C-'" . avy-goto-char-2)
    ("M-w" . avy-goto-word-1))
#+end_src
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :init (counsel-mode 1)
    :bind
    ("M-x" . counsel-M-x)
    ("C-c s" . counsel-rg))
#+end_src
** magit
git management
#+begin_src emacs-lisp
  (use-package magit
    :bind
    ("M-g" . magit-status))
#+end_src
** diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :init
    (global-diff-hl-mode)
    (setq diff-hl-gutter-mode t)
    (diff-hl-flydiff-mode +1)
    :hook (magit-post-refresh . diff-hl-magit-post-refresh))
#+end_src
** COMMENT hydra
file bookmarks
#+begin_src emacs-lisp
  (use-package hydra
    :config
    (global-set-key
     (kbd "C-c j")
     (defhydra hydra-jump (:color blue)
       "jump"
       ("d" (counsel-find-file "~/Documents") "Documents")
       ("D" (counsel-find-file "~/Downloads") "Downloads")
       ("p" (counsel-find-file "~/SurfDrive/PhD/projects") "projects")
       ;; this doesn't work
       ;("pt" (counsel-find-file "~/SurfDrive/PhD/presentations") "presentations")
       ))
       ;; what could be a good way to do this?
    (global-set-key
     (kbd "C-c p")
     (defhydra hydra-projects (:color blue)
       "projects"
       ("s" (counsel-find-file "~/SurfDrive/PhD/projects/standardstats") "standardstats"))))
#+end_src
** COMMENT auto-complete
auto complete everything
#+begin_src emacs-lisp
  (use-package auto-complete
    :after yasnippet
    :init
    (ac-config-default)
    (global-auto-complete-mode t)
    :config
    (setq auto-show-delay nil)
    (setq-default ac-sources (push 'ac-source-yasnippet ac-sources)))
#+end_src
** COMMENT flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode t))
#+end_src
** COMMENT web dictionary
#+begin_src emacs-lisp
  (use-package define-word
    :bind ("C-c d" . define-word))
#+end_src
** yasnippet
usefull snippets for me: org-mode (fig_, )
#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1)
    :config
    (setq yas-indent-line t))
#+end_src
** firefox as default browser
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
	browse-url-generic-program "firefox")
#+end_src
** emacs-pkgbuild-mode
Install it with Pacman
#+begin_src bash :results none :exports code
sudo pacman -S emacs-pkgbuild-mode
#+end_src
Then load it into emacs when opening a PKGBUILD file
#+begin_src emacs-lisp
  (use-package pkgbuild-mode
     :ensure nil
     :load-path "/usr/share/emacs/site-lisp/"
     :mode "/PKGBUILD$")
#+end_src
** systemd
#+begin_src emacs-lisp
  (use-package systemd)
#+end_src
** COMMENT writeroom-mode
#+begin_src emacs-lisp
  (use-package writeroom-mode)
#+end_src
** erc
I use weechat on command line now
#+begin_src emacs-lisp
  (use-package erc
    :ensure nil
    :config
    (setq erc-hide-list '("JOIN" "PART" "QUIT"))
    (setq erc-track-exclude-types '("JOIN" "MODE"
      "NICK" "PART" "QUIT" "305" "306" "324" "329" "332" "333" "353" "477")))
#+end_src
** calendar
perhaps change keybindings a little: [[https://github.com/emacs-evil/evil-collection/issues/211][evil-collection issue]]
#+begin_src emacs-lisp
  (use-package calfw)
  (use-package calfw-org
    :bind
    ("C-c o" . cfw:open-org-calendar))
#+end_src
* email
** smtp
#+begin_src emacs-lisp
  (use-package smtpmail
    :ensure nil
    :config
    (setq message-send-mail-function 'smtpmail-send-it
          send-mail-function 'smtpmail-send-it
          user-mail-address "<your-email-address>"
          smtpmail-default-smtp-server "<your-smtp-server>"
          smtpmail-smtp-server "<your-smtp-server>"
          smtpmail-smtp-service 587
          smtp-stream-type 'starttls
          smtpmail-smtp-user "<your-user-id>"
          smtpmail-starttls-credentials
          '(("<your-smtp-server>" 587 "<possiblly-domain>/<your-user-id>" nil))
          starttls-use-gnutls t
          starttls-gnutls-program "gnutls-cli"
          starttls-extra-args nil))
#+end_src
** mu4e
install it with pacman ~mu~
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :commands mu4e
    :bind (("C-c m" . mu4e)
           :map mu4e-headers-mode-map
           ("C-c c" . org-mu4e-store-and-capture)
           :map mu4e-view-mode-map
           ("C-c c" . org-mu4e-store-and-capture))
    :init
    (setq mu4e-drafts-folder "/Drafts"
          mu4e-sent-folder "/Sent Items"
          mu4e-trash-folder "/Deleted Items")
    (setq mu4e-maildir-shortcuts
          '(("/inbox" . ?i)
            ("/NEXT" . ?n)
            ("/Waiting" . ?w)
            ("/Deferred" . ?d)
            ("/news" . ?m)
            ("/Important backlog" . ?l)
            ("/Sent Items" . ?s)
            ("/archive" . ?r)))
    (setq mu4e-change-filenames-when-moving t) ; important for isync
    (setq mu4e-headers-date-format "%Y-%m-%d %H:%M")
    (setq mu4e-headers-fields
          '((:date          .  17)
            (:flags         .   5)
            (:from          .  22)
            (:subject       .  nil)))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-headers-include-related t)
    (setq mu4e-compose-format-flowed t)  ; plain-text nice to read on phone
    (setq mu4e-confirm-quit nil)
    (setq mu4e-view-show-images t)
    ;; (add-to-list 'mu4e-view-actions
                 ;; '("ViewInBrowser" . mu4e-action-view-in-browser) t)
    (require 'org-mu4e)
    (setq org-mu4e-link-query-in-headers-mode nil))
#+end_src
** COMMENT mu4e-conversation
#+begin_src emacs-lisp
  (use-package mu4e-conversation
    :config
    (global-mu4e-conversation-mode))
#+end_src
** mu4e notifications
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :after mu4e
    :config
    (mu4e-alert-set-default-style 'libnotify)
    :hook (after-init . mu4e-alert-enable-notifications))
#+end_src
* science packages
** ess
emacs speaks statistics, work with R etc.
*** use-package
#+begin_src emacs-lisp
  (use-package ess
    ;; :load-path "/usr/share/emacs/site-lisp/ess/"
    :commands R
    ;; :init (require 'ess-r-mode)
    :config
    (defun my-org-confirm-babel-evaluate (lang body)
      (not (string= lang "R")))  ; don't ask for R
    (setq ess-default-style 'RStudio)
    (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
    (setq inferior-R-args "--no-restore-history --no-save"))
    ;; :bind (:map ess-mode-map (";" . ess-insert-assign)))
#+end_src
*** COMMENT non-use-package
#+begin_src emacs-lisp
  (setq load-path (cons "/usr/share/emacs/site-lisp/ess" load-path))
  ;;(require 'ess-site)
  (load "ess-autoloads")
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "R")))  ; don't ask for R
  (setq ess-default-style 'RStudio)
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
  (setq inferior-R-args "--no-restore-history --no-save")
#+end_src
** markdown-mode
markdown mode for writing
#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src
** polymode
for working with .Rmd files etc.
#+begin_src emacs-lisp
  (use-package polymode)
  (use-package poly-markdown)
  ;; (use-package poly-R)
#+end_src
** matlab
if I'm ever required to work in non-open-source
#+begin_src emacs-lisp
  (use-package matlab
    :ensure nil
    :init (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
    :mode ("\\.m\\'" . matlab-mode)
    :interpreter "matlab"
    :config
    (setq matlab-indent-function t)
    (setq matlab-indent-function "matlab"))
#+end_src
** pandoc-mode
exporting markdown
#+begin_src emacs-lisp
  (use-package pandoc-mode
    :ensure t
    :hook (markdown-mode . pandoc-mode))
#+end_src
** LaTeX (AUCTeX, RefTeX)
for working with \LaTeX
#+begin_src emacs-lisp
  ;(load "auctex.el" nil t t)
  ;(load "preview-latex.el" nil t t)
  (use-package tex
    :load-path "/usr/share/emacs/site-lisp/auctex/"
    :hook
    (LaTeX-mode . turn-on-reftex)
    (LaTeX-mode . turn-on-auto-fill)
    (LaTeX-mode . prettify-symbols-mode)
    :init
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq reftex-plug-into-AUCTeX t))
#+end_src
** ispell: spell-checking
#+begin_src emacs-lisp
  (use-package ispell
    :config
    (setq ispell-dictionary "british-ize-w_accents"))
#+end_src
** hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
    :bind (:map hl-todo-mode-map
                ("C-c k" . hl-todo-previous)
                ("C-c j" . hl-todo-next))
    :hook
    ((LaTeX-mode ess-mode) . hl-todo-mode))
#+end_src
** bibtex/ivy-bibtex
reference manager I use it in conjunction with zotero, which generates the
.bib files, and org-ref, to insert citations in org files.
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :config
    (autoload 'ivy-bibtex "ivy-bibtex" "" t)
    (setq bibtex-completion-pdf-field "file"))
#+end_src
** org-ref
#+begin_src emacs-lisp
  (use-package org-ref
    :config
    (setq bibtex-completion-bibliography '("~/Documents/References/PhD.bib")
          bibtex-completion-pdf-field "file"
          bibtex-completion-notes-path "~/org/referencenotes.org")
    (setq org-ref-default-bibliography '("~/Documents/References/PhD.bib")))
#+end_src
* secret directories
These are all the settings that require secret directories, such as my org
agenda files and google calendar. They overwrite the settings with "<...>"
syntax above.
#+begin_src emacs-lisp
  ;; (use-package emacsdirs)
  (load "~/.emacs.d/secretdirs.el" t)
#+end_src
* reset gc-cons-threshold
#+begin_src emacs-lisp
  (run-with-idle-timer
   5 nil
   (lambda ()
     (setq gc-cons-threshold 1000000)
     (message "gc-cons-threshold restored to %S"
              gc-cons-threshold)))
#+end_src
